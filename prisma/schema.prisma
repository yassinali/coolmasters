// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductStatus {
  new
  hot
  sale
}

enum ProductVariant {
  gadget
  appliances
  refrigerators
  others
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String        @id @default(cuid())
  name        String?
  slug        String?
  description String?
  price       Float? @default(0)
  discount    Float? @default(0)
  stock       Int?   @default(10)
  status      ProductStatus?
  variant     ProductVariant?
  isFeatured  Boolean?      @default(false)
  brandId     String?
  brand       Brand?        @relation(fields: [brandId], references: [id])
  categories  Category[]    @relation("ProductCategories")
  images      Images[]
}


model Brand {
  id          String    @id @default(cuid())
  title       String?
  slug        String?
  description String?
  imageUrl    String?
  products    Product[]
}

model Category {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String?
  order       Int?       // controla posição de exibição no frontend
  featured    Boolean    @default(false)
  imageUrl    String?    // opcional: só se quiser mostrar banner/ícone
  products    Product[]  @relation("ProductCategories")
}

model Images{
  id String @id @default(cuid())
  imagesUrl String
  default   Boolean @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}